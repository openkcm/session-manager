# Override the "name" value, which is used to annotate some of
# the resources that are created by this Chart (using "app.kubernetes.io/name").
# +docs:property
nameOverride: ""

# Override the "fullname" value. This value is used as part of
# most of the names of the resources created by this Helm chart.
# +docs:property
fullnameOverride: ""

# This namespace allows you to define where the services are installed into.
# If not set then they use the namespace of the release.
# This is helpful when installing a chart dependency (sub chart).
namespace: ""

global:
  # This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
  image:
    # The container registry to pull the image from.
    # For example:
    #   registry: ghcr.io/openkcm
    #   repository: images/crypto-layer
    # +docs:property
    registry: ghcr.io/openkcm

    # The container image
    # +docs:property
    repository: images/session-manager

    # Override the image tag to deploy by setting this variable.
    # If no value is set, the chart's appVersion is used.
    # +docs:property
    tag: latest

    # Setting a digest will override any tag.
    # +docs:property
    # digest: sha256:0e072dddd1f7f8fc8909a2ca6f65e76c5f0d2fcfb8be47935ae3457e8bbceb20

    # Setting the command.
    # +docs:property
    command: [ "/bin/session-manager" ]

    # Kubernetes imagePullPolicy.
    pullPolicy: IfNotPresent
    # This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    pullSecrets:
      - name: "registry-access"

  # This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
  # runAsUser: 1000


# API Server Submodule Configuration
apiServer:
  # This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
  replicaCount: 1

  pod:
    # This is for setting Kubernetes Annotations to a Pod.
    # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    annotations: {}

    # This is for setting Kubernetes Labels to a Pod.
    # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    labels: {}

    securityContext: {}
    # fsGroup: 2000

    disruptionBudget:
      # Enable or disable the PodDisruptionBudget resource.
      #
      # This prevents downtime during voluntary disruptions such as during a Node upgrade.
      # For example, the PodDisruptionBudget will block `kubectl drain`
      # Pod is currently running.
      enabled: false

    nodeSelector: { }
    tolerations: [ ]
    affinity: { }
    topologySpreadConstraints: [ ]

  # This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
  service:
    # Labels to add to the service
    labels: {}
    # Annotations to add to the service
    annotations: {}
    # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
    type: ClusterIP
    # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
    ports:
      - port: 8080
        protocol: TCP
        targetPort: http
        name: http
      - port: 9091
        protocol: TCP
        targetPort: grpc
        name: grpc

  resources: {}

  # This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  livenessProbe:
    httpGet:
      path: /probe/liveness
      port: http-status
      scheme: HTTP
    failureThreshold: 1
    periodSeconds: 10
  readinessProbe:
    httpGet:
      path: /probe/readiness
      port: http-status
      scheme: HTTP
    failureThreshold: 1
    periodSeconds: 10

  # This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
  hpa:
    enabled: false
    minReplicas: 1
    maxReplicas: 1
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  # Additional init containers on the output Deployment definition.
  extraInitContainers: []

  # Additional containers on the output Deployment definition.
  extraContainers: []

  # Additional volumes on the output Deployment definition.
  extraVolumes: []

  # Additional volumeMounts on the output Deployment definition.
  extraVolumeMounts: []

  # Additional ens on the output Deployment definition.
  extraEnvs: []

  # Additional envsFrom on the output Deployment definition.
  extraEnvsFrom: []

  ports:
    - name: http-status
      containerPort: 8888
      protocol: TCP
    - name: http
      containerPort: 8080
      protocol: TCP
    - name: grpc
      containerPort: 9091
      protocol: TCP

# Token Refresher Submodule Configuration
tokenRefresher:
  pod:
    # This is for setting Kubernetes Annotations to a Pod.
    # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    annotations: {}

    # This is for setting Kubernetes Labels to a Pod.
    # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    labels: {}

    securityContext: {}
    # fsGroup: 2000

  resources: {}

  # This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  livenessProbe:
    httpGet:
      path: /probe/liveness
      port: http-status
      scheme: HTTP
    failureThreshold: 1
    periodSeconds: 10
  readinessProbe:
    httpGet:
      path: /probe/readiness
      port: http-status
      scheme: HTTP
    failureThreshold: 1
    periodSeconds: 10

  ports:
    - name: http-status
      containerPort: 8888
      protocol: TCP


# Migrate Job Configuration
migrate:
  pod:
    # This is for setting Kubernetes Annotations to a Pod.
    # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    annotations: { }

    # This is for setting Kubernetes Labels to a Pod.
    # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    labels: { }

    securityContext: { }
    # fsGroup: 2000


config:
  isImmutable: false

  # Environment where the application is running
  environment: production
  # Labels associated to metrics, traces and logs
  labels: {}

  audit:
    endpoint: http://localhost:4043/logs
    additionalProperties: |
      appID: "session-manager"

  http:
    address: ":8080"

  grpc:
    address: ":9091"

  # Expose the status port
  status:
    enabled: true
    address: ":8888"
    profiling: false

  # This does set the logger configuration
  # +docs:property
  logger:
    level: info # one of: debug, info, warn, error
    # Format of the logs
    format: json # one of: json, text
  telemetry:
    logs:
      enabled: false
      protocol: http # one of: http, grpc; Default is http
      host:
        source: embedded
        value: localhost:4317
      url: /api/v2/otlp/v1/logs
      secretRef:
        type: api-token # one of: insecure, mtls, api-token
        apiToken:
          source: embedded
          value: "unknown"
    traces:
      enabled: false
      protocol: http # one of: http, grpc; Default is http
      host:
        source: embedded
        value: localhost:4317
      url: /api/v2/otlp/v1/traces
      # OpenTelemetry traces secret; See examples from logs.
      secretRef:
        type: api-token # insecure, mtls, api-token
        apiToken:
          source: embedded
          value: "unknown"
    metrics:
      enabled: false
      protocol: http # one of: http, grpc; Default is http
      host:
        source: embedded
        value: localhost:4317
      url: /api/v2/otlp/v1/metrics
      # OpenTelemetry traces secret; See examples from logs.
      secretRef:
        type: api-token # insecure, mtls, api-token
        apiToken:
          source: embedded
          value: "unknown"
      # Metrics exposed through /metrics endpoint for prometheus
      prometheus:
        enabled: false

  database:
    name: session_manager
    port: 5432
    host:
      source: embedded
      value: host.ns.svc.cluster.local
    user:
      source: embedded
      value: postgres
    password:
      source: embedded
      value: secret

  valkey:
    host:
      source: embedded
      value: host.ns.svc.cluster.local
    user:
      source: embedded
      value: ""
    password:
      source: embedded
      value: secret
    prefix: session-manager

  sessionManager:
    sessionDuration: 12h
    redirectURI: http://localhost:9092/callback
    clientID:
      source: embedded
      value: my-client-id
    csrfSecret:
      source: embedded
      value: my-csrf-secret-at-least-thirty-two-bits-size
    jwsSigAlgs:
      - RS256
      - HS256

  migrate:
    source: file:///sql

  tokenRefresher:
    refreshInterval: 30m
