openapi: 3.0.4
info:
    title: Session Manager
    description:
    version: 1.0.0
servers:
    - url: "https://localhost:8080"
paths:
    /sm/auth:
        get:
            description: |
                The CMK UI can't directly initiate the authorization code flow with the OIDC provider because it does not know the the provider for the CMK tenant. Instead, using this endpoint, the CMK UI can indirectly initiate the flow. Steps:

                - for the given CMK tenant ID, look up the authorize and token endpoint of the related OIDC provider
                - generate:
                  - a state ID for the state parameter of the OIDC authorize endpoint
                  - a PKCE verifier and the related PKCE challenge (S256)
                - create a fingerprint according to the selected method (see below)
                - based on the state ID, persist the PKCE verifier, fingerprint, CMK tenant ID and the given request URI
                - build the authorize URI and return it with a 302 response.

                With this the CMK UI initiated the flow and the browser is redirected to the correct OIDC provider. Based on the embedded redirect_uri the Session Manager will directly receive the auth code from the OIDC provider on the /callback endpoint to continue the flow.
            operationId: auth
            parameters:
                - name: tenant_id
                  in: query
                  required: true
                  schema:
                      type: string
                - name: request_uri
                  in: query
                  required: true
                  schema:
                      type: string
            responses:
                "302":
                    description: Redirect to the OIDC provider
                    headers:
                        Location:
                            schema:
                                type: string
                default:
                    description: Unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorModel"
    /sm/callback:
        get:
            description: |
                After creating the auth code, the OIDC provider calls this endpoint, delivering the code. The Session Manager can then requests the OIDC provider to exchange the code for a valid token, additionally providing the related PKCE verifier. Steps:
                - for the given state ID, look up the request URI, PKCE verifier, fingerprint,
                    CMK tenant ID and token endpoint from the storage
                - verify the current fingerprint matches the one from the storage
                - perform a POST request to the token endpoint
                - based on the returned OIDC token, generate a session ID and CSRF token and store:
                    - the session ID
                    - the CSRF token
                    - the CMK tenant ID
                    - parts of the the OIDC token: (claims, access token, refresh token)
                    - the fingerprint
                    - the date and time the session shall expire
                - remove the state for the state ID from the storage
                - in the response set the session and CSRF cookies
                - return a 302 response using the request URI as location
            operationId: callback
            parameters:
                - name: code
                  in: query
                  required: true
                  schema:
                      type: string
                - name: state
                  in: query
                  required: true
                  schema:
                      type: string
            responses:
                "302":
                    description: Redirect to original request URI with session and CSRF cookies set
                    headers:
                        Location:
                            schema:
                                type: string
                        Set-Cookie:
                            schema:
                                type: array
                                items:
                                    type: string
                "403":
                    description: Fingerprint mismatch
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorModel"
                default:
                    description: Unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorModel"

components:
    schemas:
        ErrorModel:
            type: object
            properties:
                error_code:
                    type: integer
                error_msg:
                    type: string
